package projects

import (
	"context"
	"fmt"
	"slices"
	"strings"
	"sync"
	"text/template"

	"github.com/doptime/eloevo/agent"
	"github.com/doptime/eloevo/elo"
	"github.com/doptime/eloevo/models"
	"github.com/doptime/eloevo/tool"
	"github.com/doptime/redisdb"
	"github.com/samber/lo"
)

type UtilityFunctionMeasurement struct {
	MarketSize               string `json:"marketSize"`
	MarketGrowthRate         string `json:"marketGrowthRate"`
	ExpectedReturn           string `json:"expectedReturn"`
	TechnicalFeasibility     string `json:"technicalFeasibility"`
	InnovationPotential      string `json:"innovationPotential"`
	ResourceAllocation       string `json:"resourceAllocation"`
	ProjectRisk              string `json:"projectRisk"`
	CompetitionIntensity     string `json:"competitionIntensity"` // 注意: 效用函数中包含但原struct中没有，已添加
	ImplementationDifficulty string `json:"implementationDifficulty"`
	TimeToMarket             string `json:"timeToMarket"`
	TeamExperience           string `json:"teamExperience"`
	PolicySupport            string `json:"policySupport"`
}
type UtilityFunctionWeight struct {
	WeightMarketGrowthRate         float32
	WeightExpectedReturn           float32
	WeightTechnicalFeasibility     float32
	WeightInnovationPotential      float32
	WeightResourceAllocation       float32
	WeightProjectRisk              float32
	WeightCompetitionIntensity     float32
	WeightImplementationDifficulty float32
	WeightTimeToMarket             float32
	WeightTeamExperience           float32
	WeightPolicySupport            float32
}

type UtilityFunctionSchema struct {
	Id                      string
	Measurement             *UtilityFunctionMeasurement
	Weight                  *UtilityFunctionWeight
	PresviousProposalSorted []string
	Elo                     int64 `json:"-" description:"Ignored Parameter"`
}

func (u *UtilityFunctionSchema) GetId() string {
	return u.Id
}
func (u *UtilityFunctionSchema) Rating(delta int) int {
	u.Elo += int64(delta)
	return int(u.Elo)
}

var keyUtilityFunctionSchema = redisdb.HashKey[string, *UtilityFunctionSchema](redisdb.Opt.Rds("projects"))
var keyUtilityFunctionSchemaExpired = redisdb.HashKey[string, *UtilityFunctionSchema](redisdb.Opt.Rds("projects").Key("UtilityFunctionSchemaExpired"))
var keyUtilityFunctionMap = make(map[string]*UtilityFunctionSchema)

var UtilitySchemaLock sync.Mutex = sync.Mutex{}
var AgentBusinessUtilityFunctionMeasureGen = agent.NewAgent(template.Must(template.New("utilifyFunction").Parse(`
这是一个AGI 给出的时代商业项目的评估函数：
UtilityFunction = exp(w1*ln(MarketSize) + WeightMarketGrowthRate*ln(MarketGrowthRate) + WeightExpectedReturn*ln(ExpectedReturn) + WeightTechnicalFeasibility*ln(TechnicalFeasibility) + WeightInnovationPotential*ln(InnovationPotential) + WeightResourceAllocation*ln(ResourceAllocation) - WeightProjectRisk*ln(ProjectRisk + 1) - WeightCompetitionIntensity*ln(CompetitionIntensity) - WeightImplementationDifficulty*ln(ImplementationDifficulty) + WeightTimeToMarket*ln(TimeToMarket) + WeightTeamExperience*ln(TeamExperience) + WeightPolicySupport*ln(PolicySupport))

UtilityFunction 用以在一个以无人化的方式运营几乎一切的业务的世界中，确定运营业务的优先序。

你需要讨论并且提出这个评估函数中不同的参数的度量办法 和参数的权重。

效用函数带有权重参数的，那你需要提供合理的权重参数值。如果已经有权重参数值，那你需要进一步改进这些参数值。

这是现有的若干评估商业效用 的 度量办法+参数的权重：
{{.UtilityFunctionExplorations}}

ToDoList:
1. 现在请你仔细讨论这些方案，将他们从最好到最坏排序(用Id列表表示)。
2. 尝试提出一个更好的，新的适用这个UtilityFunction 的 度量办法+参数的权重 方案。 度量办法要求任何的方案，可以依据标准直接做出判断。

在完成讨论和提出新的评估方案后，请将ToDoList中的两项工作（方案排序和新方案）， 通过 Toolcall UtilityFunctionSchemaExplorationFinal 保存。
`))).WithTools(tool.NewTool("UtilityFunctionSchemaExplorationFinal", "Extract UtilityFunctionSchemaExploration struct according to analysis", func(model *UtilityFunctionSchema) {
	if model.Measurement != nil && model.Weight != nil {
		return
	}
	if len(model.PresviousProposalSorted) == 0 {
		return
	}
	model.Id = redisdb.NanoId(8)
	model.Elo = 1200
	mFunctionSchemas[model.Id] = model
	keyUtilityFunctionSchema.HSet(model.Id, model)
	UtilitySchemaLock.Lock()
	defer UtilitySchemaLock.Unlock()

	playersRanked := []elo.BElo{}
	for _, v := range model.PresviousProposalSorted {
		if _, ok := mFunctionSchemas[v]; ok {
			playersRanked = append(playersRanked, mFunctionSchemas[v])
		}
	}

	elo.BatchUpdateRanking(playersRanked...)
	if len(mFunctionSchemas) > ProjectsUtilityFunctionSchemaTopN*2 {

		//remove the worst 10% of the projects
		playersOrderByElo := lo.Values(mFunctionSchemas)
		//sort the players by elo
		slices.SortFunc(playersOrderByElo, func(i, j *UtilityFunctionSchema) int {
			return int(i.Elo - j.Elo)
		})
		//remove the worst 2
		fieldsToRemove := lo.Map(playersOrderByElo[:2], func(v *UtilityFunctionSchema, i int) string { return v.Id })
		mapToRemove := map[string]*UtilityFunctionSchema{}
		for _, v := range fieldsToRemove {
			mapToRemove[v] = mFunctionSchemas[v]
		}

		keyUtilityFunctionSchemaExpired.HMSet(mapToRemove)
		for _, v := range fieldsToRemove {
			delete(mFunctionSchemas, v)
		}
		keyUtilityFunctionSchema.HDel(fieldsToRemove...)
		//save other UtilityFunctionExploration
		keyUtilityFunctionSchema.HMSet(mFunctionSchemas)

		slices.Reverse(playersOrderByElo)
		for i, v := range playersOrderByElo {
			fmt.Println("Best Model,top ", i+1, v.Id, "Elo", v.Elo)
		}
	}

}))

var mFunctionSchemas = make(map[string]*UtilityFunctionSchema)

const ProjectsUtilityFunctionSchemaTopN = 10 // 假设保留最佳方案数量为 10
func EvoUtilityFunctionExplorationMeasure() {
	const numThreads = 1
	const numCallsPerThread = 1000 * 1000 / numThreads

	var wg sync.WaitGroup
	wg.Add(numThreads)
	for i := 0; i < numThreads; i++ {
		go func() {
			defer wg.Done()
			for j := 0; j < numCallsPerThread; j++ {
				items := lo.Values(projectFunctions)
				if items = lo.Shuffle(items); len(items) > ProjectsUtilityFunctionSchemaTopN {
					items = items[:ProjectsUtilityFunctionSchemaTopN]
				}
				var ret strings.Builder
				for i, v := range items {
					ret.WriteString(fmt.Sprintf("第%v个评估方案：\n%v\n", i, v.String()))
				}
				err := AgentBusinessUtilityFunctionMeasureGen.WithModel(models.FuseO1).Call(context.Background(), map[string]any{
					"UtilityFunctionExplorationMeasurement": ret.String(),
					"NewId":                                 redisdb.NanoId(8),
				})
				if err == nil {
					continue
				}
				fmt.Printf("Agent call failed: %v\n", err)
			}
		}()
	}

	wg.Wait()
}
