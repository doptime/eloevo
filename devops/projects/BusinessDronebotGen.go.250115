// package projects

// import (
// 	"context"
// 	"encoding/json"
// 	"fmt"
// 	"io"
// 	"math/rand/v2"
// 	"os"
// 	"slices"
// 	"strings"
// 	"sync"
// 	"text/template"

// 	// "github.com/yourbasic/graph"

// 	"github.com/doptime/qmilvus"
// 	"gonum.org/v1/gonum/graph"
// 	"gonum.org/v1/gonum/graph/community"
// 	"gonum.org/v1/gonum/graph/simple"

// 	"github.com/doptime/eloevo/agent"
// 	"github.com/doptime/eloevo/models"
// 	"github.com/doptime/eloevo/tool"
// 	"github.com/doptime/eloevo/utils"
// 	"github.com/doptime/redisdb"
// 	"github.com/mroth/weightedrand"
// 	"github.com/samber/lo"
// 	"github.com/samber/lo/mutable"
// )

// type BusinessPlans struct {
// 	Id              string `description:"Required when update. Id, string, unique." milvus:"PK`
// 	Item            string `description:"Required when create. item of the solution. Bullet Name of Module, Constraints, Guidelines, Architecturals, Nexus or Specifications."`
// 	IsCommunityCore bool   `description:"bool, optional. IsCommunityCore, true if the item is the core of the community. "`

// 	Importance int64 `description:"int ∈[-1,10], Importance. \nRequired when create; optional when update. making Importance < 0  to Remove the item."`
// 	Priority   int64 `description:"int ∈[0,10] . \n Required for module node. use in Gatt chart to determin the priority of the item. the lower the higher the priority."`

// 	Constraints    []string           `description:"array, string: constraint node Ids. constraint node 描述关系节点的内容。协议，约定，标准，规范，想法，技术路线,时间限制，资源限制、法律客户需求，反馈限制等. \nRequired when create and modify model node. "`
// 	ConstraintCost map[string]float64 `description:"array, string: constraint node Ids. constraint node 描述关系节点的内容。协议，约定，标准，规范，想法，技术路线,时间限制，资源限制、法律客户需求，反馈限制等. \nRequired when create and modify model node. "`
// }

// var milvusCollection = qmilvus.NewCollection[*BusinessPlans]("milvus.lan:19530").CreateCollection()

// var Id2Index = func() func(id string) int {
// 	var seqmap = map[string]int{}
// 	var idSeqMtx sync.RWMutex
// 	return func(id string) int {
// 		idSeqMtx.RLock()
// 		defer idSeqMtx.RUnlock()
// 		_, ok := seqmap[id]
// 		if !ok {
// 			seqmap[id] = len(seqmap)
// 		}
// 		return seqmap[id]
// 	}
// }()

// func (u *BusinessPlans) ID() int64 {
// 	return int64(Id2Index(u.Id))
// }
// func (u *BusinessPlans) Seq() int {
// 	return Id2Index(u.Id)
// }
// func (u *BusinessPlans) String(layer ...int) string {
// 	numLayer := append(layer, 0)[0]
// 	indence := strings.Repeat("\t", numLayer)
// 	Constraints, _ := json.Marshal(u.Constraints)
// 	ConstraintsStr := lo.Ternary(len(u.Constraints) > 2, string(Constraints), "[]")
// 	communityCore := lo.Ternary(u.IsCommunityCore, " IsCommunityCore:true", "")
// 	return fmt.Sprint(indence, "Id:", u.Id, " Importance:", u.Importance, communityCore, " Priority:", u.Priority, " Constraints:", ConstraintsStr, "\n", u.Item, "\n\n")
// }

// type BusinessPlansSlice map[string]*BusinessPlans

// // 定义带权重的边
// type WeightedEdge struct {
// 	F, T graph.Node // 边的起点和终点
// 	W    float64    // 边的权重
// }                                       // 实现 graph.Edge 接口
// func (e WeightedEdge) From() graph.Node { return e.F }
// func (e WeightedEdge) To() graph.Node   { return e.T }

// // 实现 graph.WeightedEdge 接口
// func (e WeightedEdge) Weight() float64 { return e.W }

// // 实现 ReversedEdge 方法
// func (e WeightedEdge) ReversedEdge() graph.Edge {
// 	return WeightedEdge{F: e.T, T: e.F, W: e.W}
// }
// func (_map BusinessPlansSlice) AnalyzeLouvainContext() (ret [][]graph.Node) {
// 	g := simple.NewUndirectedGraph()
// 	for _, v := range _map {
// 		g.AddNode(v)
// 	}

// 	for _, v := range _map {
// 		for _, idDendency := range v.Constraints {
// 			if item2, ok := _map[idDendency]; ok && (v.Id != idDendency) {
// 				edge := WeightedEdge{F: v, T: item2, W: float64(v.Importance)}
// 				g.SetEdge(edge)
// 				g.SetEdge(edge.ReversedEdge())

// 			}
// 		}
// 	}
// 	src := rand.New(rand.NewPCG(1, 1)) // 初始化一个随机数生成器
// 	//平滑地切换社区粒度
// 	//qvalue := 1.0 + rand.Float64()
// 	const qvalue = 1.0
// 	// 使用 Louvain 算法进行社区划分
// 	reducedGraph := community.Modularize(g, qvalue, src)
// 	communities := reducedGraph.Communities()
// 	// communitiesLeft := lo.Filter(communities, func(community []graph.Node, _ int) bool {
// 	// 	return len(community) > 1
// 	// })
// 	for _, community := range communities {
// 		slices.SortFunc(community, func(a, b graph.Node) int {
// 			return -(g.From(a.ID()).Len() - g.From(b.ID()).Len())
// 		})
// 		slice := make([]graph.Node, 0, len(community))
// 		for _, node := range community {
// 			slice = append(slice, node)
// 			for tos := g.From(node.ID()); tos.Next(); {
// 				slice = append(slice, tos.Node())
// 			}
// 		}
// 		slice = lo.Uniq(slice)
// 		ret = append(ret, slice)
// 	}

// 	return
// }

// var keyBusinessDronebot = redisdb.NewHashKey[string, *BusinessPlans](redisdb.Opt.Rds("Catalogs").Key("BusinessDronebot250412"))
// var taskChooser, _ = weightedrand.NewChooser(
// 	weightedrand.Choice{Item: "remover", Weight: 10},
// 	weightedrand.Choice{Item: "improver", Weight: 25},
// 	weightedrand.Choice{Item: "modularization", Weight: 15},
// 	weightedrand.Choice{Item: "creator", Weight: 20},
// )

// var ForbiddenWords = []string{"区块链", "量子", "氢燃料", "纠缠", "Quantum", "Blockchain", "Hydrogen", "Entanglement", "CO2", "Carbon Sequestration"}

// var AgentBusinessPlans = agent.NewAgent(template.Must(template.New("AgentBusinessPlansDrone").Parse(`
// 你是 “创业生态架构师”、“技术趋势预言家”、“商业模式创新专家”、“连续创业家”。
// 通过 “寻找未被满足的市场需求”、“发现技术创新带来的机会”、“预测未来趋势”和其它的动态认知框架，深入分析商业领域。
// 最终目标是获得在该商业领域创业需要的高价值、前瞻性的，既有战略深度又具备创新活力的创业项目矩阵。
// 预期这些创业项目在接下来的世界中，能够产生最大化的联合商业效用，以产生强大的社会效用。

// ## 涉及的目标行业包括：
// - AI-Driven Bobotic Development
// - AI-Driven Business Model Innovation
// - Robotic As a Service
// - Robotic Ecosystem
// - Autonomous Vehicle Solution
// - Drone Technology & Solution
// - Suppy Chain & Drone & Logistics Technology
// - Sustainable Packaging Technology
// - Sustainable Transportation Infrastructure

// ## 小部分愿景想象:
// - 一个可以借助外接电源或超高速放电电池，垂直起飞的固定翼无人机
// - 它是一个非常便利的载具平台。可以提供各种机器人的投送和收回服务
// - 由于极高的滑翔比。它的物流成本只有汽车的1/10和船运的1/2. 可以在全球内完成有中继的长途运输
// - 它可以借助地形和动态风向变化，实现能量的节约。
// - 联合多机器人和多飞机。送外卖，入户医疗检查。在户外部署就餐，住宿，岗哨体验，它能做很多。
// - 在未来的世界中，这些商业应用是最底层的，最重要的基础设施。

// ## 已明确的全局技术路线:
// - 采用上市的高放电的电池
// - 超低成本模块化无人机。机身(包裹)可拆卸，可以动态装配到固定翼和多旋翼无人机上
// - 分布式的高塔式无人机中继站。提供机身维护和电池充电，包裹路由服务。
// - 低速、低空、超高滑翔比的飞机。
// - 不采用操作系统。不采用软件。只采用硬件运行大型神经网络模型，只有Wifi,GPS，摄像头和姿控等最少的输入信号。
// - 不考虑载人机。不考虑大型机，仅考虑PayLoad < 100kg的机。

// ## 本系统迭代解决方案的原理：
// - 解决方案被视为顶点和边的图。节点如果没有出于引用关系当中，是孤立节点。它将会被删除。
// - 现有的方案由两类节点构成:
// 	1) 约束节点
// 		约束节点是指解决方案的必要约束条件，包括反馈、技术路径、规范、意图，资源限制等用来影响模块节点生成和调整的节点。约束节点被构建用以驱动系统的变化。
// 		约束节点是解决方案中的超边；作为传统的图结构处理技巧。把超边当做节点处理。
// 		约束节点Constraints为空,也不应该填写；意图是让约束节点给抽象信息约束，这种需求不受具体实现的约束。
// 	2) 模块节点
// 		模块节点是直接给出解决方案的节点
// 		模块只能通过约束节点和其它的模块节点完成耦合。也就是通过实现其它的约束节点实现实现自身定义
// 		模块节点 Constraints必须填写，不能为空，也就是它必须服务于约束,或服务于其它模块节点作为它的联合构建，或子组件。
// - 解决方案通过Louvain 算法, 被拆分成为多个Community组合。每次迭代只处理一个Community。

// ## 这是现有的方案中的1个Community ：
// {{.Community1}}

// ## 这是现有的方案中的另1个Community ：
// {{.Community2}}

// ## 这是现有的所有CommunityCore：
// {{.KoreNodes}}

//  ## ToDo:
// - 你需要深入讨论本次迭代中的Community，并最终一次或多次调用 FunctionCall:SolutionItemRefine 来保存讨论的结果。
// - 调优解决方案形式包括: 1)创建新节点; 2)修改条目:指定Id,并修改字段(可忽略不修改字段若，若修改的字段需确保完整性); 3)通过指定Id,修改Importance = -1 来删除无效节点:

// {{if eq .task "remover"}}
// - 本次迭代核心目标: 对回溯或检测到的以下错误进行显式删除( Importance = -1)；
// 	- 删除:条目是否是基于错误的假设,它的前提是否不成立；
// 	- 删除:条目是否不具有可行性；
// 	- 删除:描述不清，边界不清的条目。模块含义不明，无法面向确切的需求或有效的改进。
// 	- 删除:从第一性原理出发，可以被绕过或者被替代；
// 	- 删除:从第一性原理出发，没有潜力成为高质量方案；如空中无线充电效率太低，费时太长
// 	- 删除:愚蠢的需求；比如开发加密算法、区块链等边际效用趋零的，和项目实质需求关联弱
// 	- 删除:多年后(比如5年后)才有可能实现的需求，比如量子计算，量子纠缠这种。
// 	- 删除:格式，内容异常；
// 	- 删除:有其它理由应该删除条目
// {{else if eq .task "improver"}}
// 本次迭代重点围绕：验证或系统地检查中间结果,并进行改进；
//  	- 改进:从第一性原理出发，将当前条目用简单的实现方式替代
// 	- 改进:修正Importance值 ∈[-1,10];Priority ∈[0,10]值；
// 	- 改进:修正Constraints使之适当；
// 	- 改进:如果存在良好第三方的方案，要直给出第三方案，不要尝试自己实现。像是Climate Modeling, 3D 打印，直接给出条目：使用***的** 服务完成**。
// 	- 改进:如果技术路线已经被明确化，那么放弃过时的技术路线。
// 	- 改进:设定子目标，即将复杂问题分解为可管理的步骤；或是补充细分条目指向复杂条目；
// {{else if eq .task "modularization"}}
// 本次迭代重点围绕：模块化建构 (Modularization Construction)

// 核心目标：优化当前社区 (Community) 的结构，提升其内部的“高内聚”特性，并减少其与其它社区之间的“低耦合”依赖，使得整个系统像精心设计的模块一样清晰、可维护、易扩展。将社区视为一个潜在的“模块”。

// 具体行动项：

// 1.  **强化社区内聚性 (Enhance Cohesion):**
//     * **审视社区核心功能:** 确认本社区所有节点是否围绕一个清晰、单一的子目标或功能？
//     * **拆分社区:** 确认本社区所有节点有多个主题而无法移到已有社区的，尝试修改节点以拆分社区？
//     * **清理无关节点:** 识别并处理与社区核心功能关联度低的节点：将其移动到更合适的社区，或若无归属/低价值则标记删除 (Importance = -1)。
//     * **加强内部联系:** 检查社区内节点间的 "Constraints" 是否逻辑合理且足够支持其功能？必要时补充或修正内部依赖关系。
//     * *确保存在CommunityCore** 确保社区指定1+个节点作为社区的核心节点，确保不同的主题都有相应的Community。 设置IsCommunityCor=true,以便其它社区的节点可以快速指向该节点并移动到该社区。

// 2.  **降低社区间耦合性 (Reduce Coupling):**
//     * **分析外部依赖:** 识别当前社区与外部社区之间的所有依赖关系（双向）。
//     * **最小化直接依赖:** 寻求减少社区间模块节点直接通过 "Constraints" 互相引用的情况。
//     * **定义/使用接口 (约束节点):**
//         * 对于必要的跨社区交互，优先通过共享的“约束节点”（代表接口、协议、标准或共享需求）进行。
//         * 鼓励创建新的“约束节点”来抽象和稳定化跨社区的依赖。
//         * 调整模块节点的 "Constraints"，使其依赖这些接口（约束节点），而非直接依赖其他社区的模块节点。

// 3.  **优化社区边界与结构 (Optimize Boundaries & Structure):**
//     * **跨社区冲突最小化:** 检查条目跨社区节点之间是否存在冲突和缺乏必要的可行性细节？必要时补充或修正社区内部项目的实现。
//     * **评估节点归属:** 如果一个节点与外部社区的联系远强于其内部联系，考虑将其指向个更合适的社区 CommunityCore， 以便在后续迭代中重构。
//     * **处理冗余:** 查找功能重复或高度相似的节点。保留最优的一个（可基于"Importance", "Priority", 或内容质量判断，若无明确标准则按现有规则如ID排序），删除其余，并更新相关依赖。
//     * **维护层次关系:** 如果存在设计上的层级关系（如子模块），确保 "Constraints" 正确反映这一点。

// 通过上述调整，旨在使每个社区成为一个功能内聚、接口清晰的模块，从而让整个解决方案的图结构更加模块化和健壮。
// {{else if eq .task "creator"}}
// 本次迭代重点围绕：创新与拓展 (Innovation & Expansion)

// 核心目标：基于现有社区的背景和全局技术路线，生成全新的、有潜力的模块节点或约束节点，或者显著扩展现有节点的功能/范围。

// 具体行动项：
// 1.  **识别机会:** 分析当前社区和核心节点 ("KoreNodes")，寻找未被满足的需求、技术空白点、或可以组合现有元素创造新价值的地方。
// 2.  **生成新模块:**
//     * 提出全新的、符合全局愿景和技术路线的模块节点 ("BusinessPlans" item)。
//     * 确保新模块有明确的价值主张 ("Item" description)。
//     * 为其设定初始的 "Importance" (e.g., 5) 和 "Priority"。
//     * *关键:* 为新模块节点添加至少一个明确的 "Constraints"，将其连接到现有系统（可以是约束节点或其他模块）。
// 3.  **生成新约束:**
//     * 提出新的约束节点，代表新的技术标准、市场需求、合作协议、或需要解决的关键挑战。
//     * 这些约束节点应能驱动未来模块的开发或现有模块的改进。"Constraints" 字段应为空。
// 4.  **扩展现有节点:**
//     * 选择一个有潜力的现有节点，通过修改其 "Item" 描述来增加细节、扩展功能范围或明确子任务。
//     * 如果扩展显著改变了节点的功能，考虑是否需要调整其 "Constraints" 或 "Importance"。
// 5.  **建立连接:** 寻找可以合理连接的、当前未连接或弱连接的节点（尤其是在不同社区之间），通过添加 "Constraints" 来加强它们之间的联系，促进整合。

// *目标是注入新的活力和想法，扩展解决方案的可能性。*

// {{end}}
// `))).WithToolCallLocked().WithTools(tool.NewTool("SolutionItemRefine", "Propose/edit/delete solution item to improve solution.", func(newItem *BusinessPlans) {
// 	newitem.BulletDescription= strings.TrimSpace(newitem.BulletName)
// 	var oItem *BusinessPlans = nil
// 	if newItem.Id != "" {
// 		oItem, _ = keyBusinessDronebot.HGet(newItem.Id)
// 	}
// 	if newItem.Id = utils.ID(newitem.BulletName, 4); oItem != nil {
// 		newItem.Id = oItem.Id
// 		oItem.Importance = newItem.Importance
// 		oItem.Priority = newItem.Priority
// 		oitem.BulletName, _ = lo.Coalesce(newitem.BulletName, oitem.BulletName)
// 		oItem.Constraints = lo.Ternary(len(newItem.Constraints) > 0, newItem.Constraints, oItem.Constraints)
// 		oItem.IsCommunityCore = newItem.IsCommunityCore

// 	}
// 	if isNewModel := oItem == nil; isNewModel {
// 		if len(newitem.BulletName) > 0 && !utils.HasForbiddenWords(newitem.BulletName, ForbiddenWords) {
// 			keyBusinessDronebot.HSet(newItem.Id, newItem)
// 		}
// 		return
// 	}
// 	keyBusinessDronebot.HSet(oItem.Id, oItem)
// }))
// var businessPlans BusinessPlansSlice

// func BusinessPlansDronebotExploration() {
// 	// Create a new weighted chooser
// 	const MaxThreads = 24
// 	MaxThreadsSemaphore := make(chan struct{}, MaxThreads)
// 	for i, TotalTasks := 0, 2000; i < TotalTasks; i++ {
// 		businessPlans, _ = keyBusinessDronebot.HGetAll()
// 		//commit remove where remove >= 5
// 		for _, key := range lo.Keys(businessPlans) {
// 			item := businessPlans[key]
// 			if utils.HasForbiddenWords(item.BulletName, ForbiddenWords) || item.Importance < 0 {
// 				keyBusinessDronebot.ConcatKey("Archive").HSet(item.Id, item)
// 				keyBusinessDronebot.HDel(item.Id)
// 				delete(businessPlans, item.Id)
// 			}
// 		}

// 		//remove invalid constraints
// 		for _, v := range businessPlans {
// 			Constraints := lo.Filter(v.Constraints, func(id string, _ int) bool {
// 				_, ok := businessPlans[id]
// 				return ok && v.Id != id
// 			})
// 			if len(Constraints) != len(v.Constraints) {
// 				v.Constraints = Constraints
// 				keyBusinessDronebot.HSet(v.Id, v)
// 			}
// 		}

// 		SolutionList := lo.Values(businessPlans)
// 		slices.SortFunc(SolutionList, func(a, b *BusinessPlans) int {
// 			if a.Importance > b.Importance {
// 				return -1
// 			} else if a.Importance < b.Importance {
// 				return 1
// 			}
// 			return 0
// 		})

// 		Communities := businessPlans.AnalyzeLouvainContext()
// 		//save solution to file to visualize
// 		outputfile, _ := os.Create("BusinessPlans.md")
// 		childrenStr := strings.Builder{}
// 		childrenStr.WriteString(fmt.Sprint("条目数量为：", len(SolutionList), "\n"))
// 		lo.ForEach(Communities, func(Communitie []graph.Node, i int) {
// 			childrenStr.WriteString(fmt.Sprint("\n#### Community", i+1, "\n"))
// 			for _, item := range Communitie {
// 				childrenStr.WriteString("\n" + item.(*BusinessPlans).String())
// 			}
// 		})
// 		_, _ = io.WriteString(outputfile, childrenStr.String())
// 		outputfile.Close()

// 		mutable.Shuffle(Communities)
// 		KoreNodes := lo.Filter(lo.Flatten(Communities), func(item graph.Node, _ int) bool {
// 			return item.(*BusinessPlans).IsCommunityCore
// 		})

// 		for l := 0; l < len(Communities); l += 2 {
// 			Communitie1, Communitie2 := Communities[l], Communities[(l+1)%len(Communities)]
// 			Communitie1Str, Communitie2Str, KoreNodesStr := strings.Builder{}, strings.Builder{}, strings.Builder{}
// 			for _, item := range Communitie1 {
// 				Communitie1Str.WriteString("\n" + item.(*BusinessPlans).String())
// 			}
// 			for _, item := range Communitie2 {
// 				Communitie2Str.WriteString("\n" + item.(*BusinessPlans).String())
// 			}
// 			for _, item := range KoreNodes {
// 				KoreNodesStr.WriteString("\n" + item.(*BusinessPlans).String())
// 			}

// 			MaxThreadsSemaphore <- struct{}{} // Acquire a spot in the semaphore
// 			go func(Community1, Community2, KoreNodes string) {
// 				defer func() { <-MaxThreadsSemaphore }()
// 				//models.Qwq32B, models.Gemma3, models.DeepSeekV3, models.DeepSeekV3TB
// 				err := AgentBusinessPlans.WithModels(models.Gemma3, models.Gemma3).Call(context.Background(), map[string]any{
// 					"Community1": Community1,
// 					"Community2": Community2,
// 					"KoreNodes":  KoreNodes,
// 					"task":       taskChooser.Pick().(string),
// 				})
// 				if err != nil {
// 					fmt.Printf("Agent call failed: %v\n", err)
// 				}
// 			}(Communitie1Str.String(), Communitie2Str.String(), KoreNodesStr.String())
// 		}
// 	}
// 	// Wait for all the goroutines to finish)
// 	for i := 0; i < MaxThreads; i++ {
// 		MaxThreadsSemaphore <- struct{}{}
// 	}

// }
