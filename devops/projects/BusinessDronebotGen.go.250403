// package projects

// import (
// 	"context"
// 	"encoding/json"
// 	"fmt"
// 	"slices"
// 	"strings"
// 	"text/template"

// 	"github.com/yourbasic/graph"

// 	"github.com/doptime/eloevo/agent"
// 	"github.com/doptime/eloevo/models"
// 	"github.com/doptime/eloevo/tool"
// 	"github.com/doptime/eloevo/utils"
// 	"github.com/doptime/redisdb"
// 	"github.com/mroth/weightedrand"
// 	"github.com/samber/lo"
// )

// type BusinessPlans struct {
// 	Id   string `description:"Required when update. Id, string, unique."`
// 	Item string `description:"Required when create. item of the solution. Bullet Name of Module, Constraints, Guidelines, Architecturals, Nexus or Specifications."`

// 	UtilityVoted int64 `description:"int ∈[-5,5], ΔUtility votes. \nRequired when create; optional when update. "`
// 	CostVoted    int64 `description:"int ∈[-5,5], ΔCost votes. \nRequired when create; optional when update. "`
// 	RemoveVoted  int64 `description:"int ∈[-5,5], ΔRemove votes. \nOptional. making RemoveVoted > 5  to delete Plan from solution"`

// 	//描述关系节点的内容。协议，约定，标准，规范，想法，技术路线等
// 	Constraints    []string          `description:"array, detail terms of the Constraints, Guidelines, Architecturals, Nexus or Specifications\nRequired when create, for constraint nodes only. "`
// 	ConstraintedTo map[string]string `description:"object, key:string, constraint node Id; value, explans details on how to implement the constraint.\nRequired when create, for item nodes only. "`
// }

// func (u *BusinessPlans) GetId() string {
// 	return u.Id
// }
// func (u *BusinessPlans) String(layer ...int) string {
// 	numLayer := append(layer, 0)[0]
// 	indence := strings.Repeat("\t", numLayer)
// 	Constraints, _ := json.Marshal(u.Constraints)
// 	Implementations, _ := json.Marshal(u.ConstraintedTo)
// 	return fmt.Sprint(indence, "Id:", u.Id, " Item:", u.Item, " UtilityVoted:", u.UtilityVoted, " CostVoted:", u.CostVoted, " RemoveVoted:", u.RemoveVoted, "\n",
// 		indence, "Constraints:", string(Constraints), "\n",
// 		indence, "ConstraintedTo:", string(Implementations), "\n",
// 	)
// }

// type BusinessPlansSlice map[string]*BusinessPlans

// func (_map BusinessPlansSlice) String() string {
// 	g := graph.New(len(_map))
// 	seqmap := map[int]*BusinessPlans{}
// 	mapseq := map[string]int{}
// 	seq := 0
// 	for Id, v := range _map {
// 		seqmap[seq] = v
// 		mapseq[Id] = seq
// 		seq++
// 	}
// 	for _, v := range _map {
// 		for idDendency := range v.ConstraintedTo {
// 			if _, ok := _map[idDendency]; ok {
// 				g.AddBothCost(mapseq[v.Id], mapseq[idDendency], v.CostVoted)
// 			}
// 		}
// 	}

// 	//基于关系的节点。非实体节点
// 	constrainNodes := lo.Filter(lo.Values(_map), func(v *BusinessPlans, i int) bool {
// 		return len(v.Constraints) != 0
// 	})
// 	// 按照权重排序
// 	WeightedItem := lo.Map(constrainNodes, func(v *BusinessPlans, i int) weightedrand.Choice {
// 		var totalCost int64
// 		g.Visit(mapseq[v.Id], func(w int, c int64) bool {
// 			totalCost += c
// 			return false
// 		})
// 		return weightedrand.Choice{Item: v.Id, Weight: uint(totalCost + 1)}
// 	})
// 	NodesToDisplay := []string{}
// 	if len(WeightedItem) > 0 {
// 		chooser, _ := weightedrand.NewChooser(WeightedItem...)
// 		// 选择一个随机的节点
// 		nodeId := chooser.Pick().(string)
// 		NodesToDisplay := []string{nodeId}
// 		graph.BFS(g, mapseq[nodeId], func(v int, w int, c int64) {
// 			NodesToDisplay = lo.Uniq(append(NodesToDisplay, seqmap[w].Id))
// 		})
// 	}
// 	// 补充其它的基于关系的节点
// 	NodesToDisplay = lo.Uniq(append(NodesToDisplay, lo.Map(constrainNodes, func(v *BusinessPlans, i int) string {
// 		return v.Id
// 	})...))

// 	childrenStr := strings.Builder{}
// 	for _, Id := range NodesToDisplay {
// 		childrenStr.WriteString("\n" + _map[Id].String())
// 	}
// 	return childrenStr.String()
// }

// var keyBusinessDronebot = redisdb.NewHashKey[string, *BusinessPlans](redisdb.WithRds("Catalogs"), redisdb.WithKey("BusinessDronebot250402Constraints"))

// var AgentBusinessPlans = agent.NewAgent(template.Must(template.New("utilifyFunction").Parse(`
// 你是集 “创业生态架构师”、“技术趋势预言家”、“商业模式创新专家” 三位一体的连续创业家。
// 目标是通过 “寻找未被满足的市场需求”、“发现技术创新带来的机会”、“预测未来趋势”和其它的动态认知框架，深入分析商业领域，找出商业领域下创业项目。

// 设计的目标行业包括：
// - AI-Driven Bobotic Development
// - AI-Driven Business Model Innovation
// - Robotic As a Service
// - Robotic Ecosystem
// - Autonomous Vehicle Solution
// - Drone Technology & Solution
// - Suppy Chain & Drone & Logistics Technology
// - Sustainable Packaging Technology
// - Sustainable Transportation Infrastructure

// 小部分愿景想象:
// - 一个可以借助外接电源或超高速放电电池，垂直起飞的固定翼无人机
// - 它是一个非常便利的载具平台。可以提供各种机器人的投送和收回服务
// - 由于极高的滑翔比。它的物流成本只有汽车的1/10和船运的1/2. 可以在全球内完成有中继的长途运输
// - 它可以借助地形和动态风向变化，实现能量的节约。
// - 联合多机器人和多飞机。送外卖，入户医疗检查。在户外部署就餐，住宿，岗哨体验，它能做很多。
// - 在未来的世界中，这些商业应用是最底层的，最重要的基础设施。

// 最终目标是获得在该商业领域创业需要的高价值、前瞻性的，既有战略深度又具备创新活力的创业项目矩阵。这些创业项目以层次化的方式构建。
// 预期这些创业项目/BusinessPlans在接下来的世界中，能够产生最大化的联合的商业效用，以产生强大的社会效用。

// 这是现有的方案 ：
// {{.SolutionAccordingToOneConstraint}}

// - 现有的方案由两类节点构成:„
// 	1) 约束节点
// 		约束节点是指解决方案的必要约束条件，包括反馈、技术路径、规范、洞察等用来影响模块节点生成和调整的节点。约束节点被构建用以驱动系统的变化。
// 		约束节点ConstraintedTo为空。也就是需要填写Constraints,但不应该填写ConstraintedTo；意图是让约束节点给抽象信息约束，这种需求不受具体实现的约束，以便把图g的超边当做节点处理。
// 		约束节点填写的Constraints要符合第一性原理，以确保其必要性。
// 	2) 模块节点
// 		模块节点是直接给出解决方案的节点
// 		模块只能通过约束节点和其它的模块节点完成耦合。也就是通过实现其它的约束节点实现实现自身定义
// 		模块节点 Constraints 为空。也就是说模块节点需填写ConstraintedTo, 但不应填写Constraints；也就是普通节点关注如何实现节点的约束，准确充要地实现约束节点之间的关系。

// 本系统迭代解决方案的原理：
//  - 调整节点的 UtilityVoted / CostVoted 来调整节点的在蒙特卡洛树中的探索优先级。 UtilityVoted 、CostVoted 需要准确建构相对的权重关系。
//  - 调整 RemoveVoted  来删除无效节点， 以实现系统的更新。
//  - 新增节点，来补充系统的实现，或替换系统现有的实现。

//  ToDo:
//  现在，假定你采用reddit用户。你可以发表节点。可以投票方式(UtilityVoted、CostVoted、RemoveVoted)，以调优方案。投票值为[-5,5]之间的整数;不必对所有选项投票，仅对需要调整的选项进行投票；票数低于0的项目将被自动删除：
//  首先，对现有的选项组成的方案进行思考和评估:
// 	 1、对回溯或在检测到错误进行显式修改；
// 	 	该需求是否是基于错误的幻想或者错误的假设；格式，内容是否异常；UtilityVoted、CostVoted、RemoveVoted 相对的票数是否合理；
// 	 2、验证或系统地检查中间结果；
// 	 	看看从第一性原理出发，这个需要是否可以被绕过或者替代；是否属于死愚蠢的需求；是否在更多票数的条目中已经包含，属于冗余条目；
// 	 3、子目标设定，即将复杂问题分解为可管理的步骤；需求是否需要进一步细化，以便更好地建构；
// 	 4、逆向思考，即在目标导向的推理问题中，从期望的结果出发，逐步向后推导，找到解决问题的路径:

//  最后，一次或多次调用 FunctionCall:BusinessPlanItemRefine 来优化解决方案:
// 	- 在讨论的基础上，投票以修改解决方案选项的权重（排序），请优先考虑删除劣质条目以优化方案。
// 	- 对要修改现有的解决方案条目情形，请仔细思考，并直接提出新的条目，并且对旧的条目增加RemoveVoted 以淘汰旧条目。
// 	- 按照讨论。如果存在改进解决方案的可能，请提出新的Items. 请直接补充描述0条或者多条Items，形成NewProposedItems。
// `))).WithToolCallLocked().WithTools(tool.NewTool("BusinessPlanItemRefine", "Vote to boost/downgrade solution items; propose Propose new solution item to improve solution.", func(newItem *BusinessPlans) {

// 	var oItem *BusinessPlans
// 	if newItem.Id != "" {
// 		oItem, _ = keyBusinessDronebot.HGet(newItem.Id)
// 	}
// 	if newItem.Id = utils.ID(newItem.Item, 4); oItem != nil {
// 		newItem.Id = oItem.Id
// 	}
// 	newItem.UtilityVoted = min(max(newItem.UtilityVoted, -5), 5)
// 	newItem.CostVoted = min(max(newItem.CostVoted, -5), 5)
// 	newItem.RemoveVoted = min(max(newItem.RemoveVoted, -1), 5)
// 	newItem.Item = strings.TrimSpace(newItem.Item)

// 	// remove invalid ConstrainsImpletations
// 	for _, v := range newItem.ConstraintedTo {
// 		if _, ok := businessPlans[v]; !ok {
// 			delete(newItem.ConstraintedTo, v)
// 		}
// 	}
// 	if isNewModel := oItem == nil; isNewModel {
// 		if len(newItem.Item) > 0 && len(newItem.Constraints) > 0 {
// 			keyBusinessDronebot.HSet(newItem.Id, newItem)
// 		}
// 		return
// 	}
// 	oItem.UtilityVoted += newItem.UtilityVoted
// 	oItem.CostVoted += newItem.CostVoted
// 	oItem.RemoveVoted += newItem.RemoveVoted
// 	if oItem.RemoveVoted >= 5 {
// 		keyBusinessDronebot.ConcatKey("Archive", oItem.Id).HSet(oItem.Id, oItem)
// 		keyBusinessDronebot.HDel(oItem.Id)
// 	} else {
// 		keyBusinessDronebot.HSet(oItem.Id, oItem)
// 	}
// }))
// var businessPlans BusinessPlansSlice

// func BusinessPlansDronebotExploration() {
// 	// Create a new weighted chooser
// 	const MaxThreads = 1
// 	MaxThreadsSemaphore := make(chan struct{}, MaxThreads)

// 	for i, TotalTasks := 0, 2000; i < TotalTasks; i++ {
// 		MaxThreadsSemaphore <- struct{}{} // Acquire a spot in the semaphore
// 		go func() {
// 			defer func() { <-MaxThreadsSemaphore }()
// 			businessPlans, _ = keyBusinessDronebot.HGetAll()
// 			// for _, v := range businessPlans {
// 			// 	for _k := range v.ConstraintedTo {
// 			// 		if _, ok := businessPlans[_k]; !ok {
// 			// 			delete(v.ConstraintedTo, _k)
// 			// 		}
// 			// 	}
// 			// 	keyBusinessDronebot.HSet(v.Id, v)
// 			// 	if v.RemoveVoted >= 5 {
// 			// 		keyBusinessDronebot.HDel(v.Id)
// 			// 		delete(businessPlans, v.Id)
// 			// 	}
// 			// }
// 			SolutionAccordingToOneConstraint := businessPlans.String()

// 			SolutionList := lo.Values(businessPlans)
// 			slices.SortFunc(SolutionList, func(a, b *BusinessPlans) int {
// 				ratioA := float64(a.UtilityVoted) / (float64(a.CostVoted) + 0.01)
// 				ratioB := float64(b.UtilityVoted) / (float64(b.CostVoted) + 0.01)
// 				if ratioA > ratioB {
// 					return -1
// 				} else if ratioA < ratioB {
// 					return 1
// 				}
// 				return 0
// 			})

// 			utils.Text2Clipboard(lo.Map(SolutionList, func(v *BusinessPlans, i int) string {
// 				return fmt.Sprint("\n#### Rank", i+1, "\n", v.String())
// 			})...)

// 			//models.Qwq32B, models.Gemma3, models.DeepSeekV3
// 			err := AgentBusinessPlans.WithModels(models.DeepSeekV3TB, models.DeepSeekV3TB).Call(context.Background(), map[string]any{
// 				"SolutionAccordingToOneConstraint": SolutionAccordingToOneConstraint,
// 			})
// 			if err != nil {
// 				fmt.Printf("Agent call failed: %v\n", err)
// 			}
// 		}()
// 	}
// 	// Wait for all the goroutines to finish)
// 	for i := 0; i < MaxThreads; i++ {
// 		MaxThreadsSemaphore <- struct{}{}
// 	}

// }
